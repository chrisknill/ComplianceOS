import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/prisma'
import { z } from 'zod'

const createWasteRecordSchema = z.object({
  wasteTypeId: z.string().min(1, 'Waste type is required'),
  quantity: z.number().positive('Quantity must be positive'),
  unit: z.enum(['KG', 'LITERS', 'CUBIC_METERS', 'PIECES']),
  location: z.string().min(1, 'Location is required'),
  generatedBy: z.string().min(1, 'Generated by is required'),
  generatedDate: z.string().datetime(),
  storedDate: z.string().datetime().optional(),
  disposalDate: z.string().datetime().optional(),
  disposalMethod: z.enum(['LANDFILL', 'INCINERATION', 'RECYCLING', 'COMPOSTING', 'TREATMENT']),
  disposalFacility: z.string().optional(),
  transporter: z.string().optional(),
  manifestNumber: z.string().optional(),
  cost: z.number().positive().optional(),
  status: z.enum(['GENERATED', 'STORED', 'IN_TRANSIT', 'DISPOSED']).default('GENERATED'),
  notes: z.string().optional(),
  attachments: z.string().optional(), // JSON array
})

const updateWasteRecordSchema = createWasteRecordSchema.partial()

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { searchParams } = new URL(request.url)
    const wasteTypeId = searchParams.get('wasteTypeId')
    const status = searchParams.get('status')
    const generatedBy = searchParams.get('generatedBy')
    const startDate = searchParams.get('startDate')
    const endDate = searchParams.get('endDate')
    const page = parseInt(searchParams.get('page') || '1')
    const limit = parseInt(searchParams.get('limit') || '50')
    const sortBy = searchParams.get('sortBy') || 'generatedDate'
    const sortOrder = searchParams.get('sortOrder') || 'desc'

    const where: any = {}
    if (wasteTypeId) where.wasteTypeId = wasteTypeId
    if (status) where.status = status
    if (generatedBy) where.generatedBy = { contains: generatedBy, mode: 'insensitive' }
    if (startDate) where.generatedDate = { gte: new Date(startDate) }
    if (endDate) {
      where.generatedDate = {
        ...where.generatedDate,
        lte: new Date(endDate),
      }
    }

    const skip = (page - 1) * limit

    const [wasteRecords, total] = await Promise.all([
      prisma.wasteRecord.findMany({
        where,
        include: {
          wasteType: true,
          logs: {
            orderBy: { timestamp: 'desc' },
            take: 5,
          },
        },
        orderBy: { [sortBy]: sortOrder },
        skip,
        take: limit,
      }),
      prisma.wasteRecord.count({ where }),
    ])

    return NextResponse.json({
      wasteRecords,
      pagination: {
        page,
        limit,
        total,
        pages: Math.ceil(total / limit),
      },
    })
  } catch (error) {
    console.error('Error fetching waste records:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const validatedData = createWasteRecordSchema.parse(body)

    // Generate record number
    const year = new Date().getFullYear()
    const count = await prisma.wasteRecord.count({
      where: {
        recordNumber: {
          startsWith: `WM-${year}-`,
        },
      },
    })
    const recordNumber = `WM-${year}-${String(count + 1).padStart(4, '0')}`

    const wasteRecord = await prisma.wasteRecord.create({
      data: {
        ...validatedData,
        recordNumber,
        generatedDate: new Date(validatedData.generatedDate),
        storedDate: validatedData.storedDate ? new Date(validatedData.storedDate) : null,
        disposalDate: validatedData.disposalDate ? new Date(validatedData.disposalDate) : null,
        createdBy: session.user.id,
      },
      include: {
        wasteType: true,
      },
    })

    // Create initial log entry
    await prisma.wasteRecordLog.create({
      data: {
        wasteRecordId: wasteRecord.id,
        action: 'GENERATED',
        performedBy: session.user.id,
        comments: 'Waste record created',
      },
    })

    return NextResponse.json(wasteRecord, { status: 201 })
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json({ error: 'Validation error', details: error.errors }, { status: 400 })
    }
    console.error('Error creating waste record:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}
