generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String
  name              String?
  role              String   @default("USER") // ADMIN, USER
  jobTitle          String?
  department        String?
  managerId         String?  // Self-referential for org chart
  phone             String?
  startDate         DateTime?
  status            String   @default("ACTIVE") // ACTIVE, ON_LEAVE, TERMINATED
  avatarUrl         String?
  location          String?
  hasCompletedSetup Boolean  @default(false)
  companyId         String?
  company           Company? @relation(fields: [companyId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  trainings         TrainingRecord[]
  manager           User?    @relation("ManagerSubordinates", fields: [managerId], references: [id], onDelete: SetNull)
  subordinates      User[]   @relation("ManagerSubordinates")
}

model Company {
  id            String   @id @default(cuid())
  name          String
  sicCode       String?
  address       String?
  postCode      String?
  telephone     String?
  email         String?
  adminPerson   String?      // free text for now; can upgrade to relation later
  employees     Int?         // headcount
  website       String?
  services      String       // JSON array stored as string for SQLite compatibility
  owners        User[]       // reverse relation
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Document {
  id              String    @id @default(cuid())
  type            String    // POLICY, PROCEDURE, WORK_INSTRUCTION, REGISTER
  title           String
  code            String?
  version         String    @default("1.0")
  status          String    @default("DRAFT") // DRAFT, PENDING_APPROVAL, APPROVED, ARCHIVED
  owner           String?
  nextReview      DateTime?
  isoClauses      String    // JSON array as string
  url             String?   // SharePoint/OneDrive URL
  sharepointId    String?   // SharePoint file/item ID
  driveId         String?   // OneDrive/SharePoint drive ID
  trackChanges    Boolean   @default(true) // Enforce track changes
  lastEditedBy    String?
  lastEditedAt    DateTime?
  editorsCount    Int?      // Number of people who edited
  commentsCount   Int?      // Number of comments/tracked changes
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  approvals       DocumentApproval[]
  versions        DocumentVersion[]
}

model DocumentApproval {
  id          String   @id @default(cuid())
  documentId  String
  level       Int      // 1, 2, 3 (e.g., Manager, Director, CEO)
  approverRole String  // e.g., "Quality Manager", "Operations Director"
  approverName String?
  status      String   @default("PENDING") // PENDING, APPROVED, REJECTED
  comments    String?
  signedAt    DateTime?
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

model DocumentVersion {
  id          String   @id @default(cuid())
  documentId  String
  version     String
  changes     String?  // Description of changes
  changedBy   String
  approvedBy  String?
  approvedAt  DateTime?
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

model Course {
  id          String   @id @default(cuid())
  title       String
  code        String?
  mandatory   Boolean  @default(false)
  renewalDays Int?
  records     TrainingRecord[]
}

model TrainingRecord {
  id            String    @id @default(cuid())
  userId        String
  courseId      String
  status        String    @default("NOT_STARTED") // NOT_STARTED, IN_PROGRESS, COMPLETE, EXPIRED
  dueDate       DateTime?
  completed     DateTime?
  score         Int?
  documentUrl   String?   // URL or path to uploaded certificate/evidence
  documentName  String?   // Original filename
  notes         String?   // Additional notes
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  
  @@unique([userId, courseId])
}

model Risk {
  id         String   @id @default(cuid())
  title      String
  category   String   @default("QUALITY") // QUALITY, ENVIRONMENTAL, HSE
  context    String?
  likelihood Int
  severity   Int
  controls   String   // JSON array as string
  owner      String?
  reviewDate DateTime?
  status     String   @default("OPEN") // OPEN, TREATED, CLOSED
  isoRefs    String   // JSON array as string
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  approvals  RiskApproval[]
}

model RiskApproval {
  id          String   @id @default(cuid())
  riskId      String
  level       Int      // 1, 2, 3
  approverRole String
  approverName String?
  status      String   @default("PENDING") // PENDING, APPROVED, REJECTED
  comments    String?
  signedAt    DateTime?
  risk        Risk     @relation(fields: [riskId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

model Equipment {
  id           String        @id @default(cuid())
  name         String
  assetTag     String?       @unique
  location     String?
  maintDue     DateTime?
  status       String        @default("ACTIVE") // ACTIVE, OUT_OF_SERVICE
  calibrations Calibration[]
}

model Calibration {
  id             String    @id @default(cuid())
  equipmentId    String
  dueDate        DateTime
  performedOn    DateTime?
  certificateUrl String?
  result         String?
  equipment      Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
}

model RegisterEntry {
  id      String   @id @default(cuid())
  type    String   // RISK, INCIDENT, NONCONFORMITY, COMPLIANCE_OBLIGATION, LEGAL, ASPECT_IMPACT
  title   String
  details String?
  owner   String?
  status  String?
  date    DateTime @default(now())
}

// ========================================
// ISO 45001 OH&S MODELS
// ========================================

model OHSHazard {
  id          String   @id @default(cuid())
  title       String
  area        String?
  description String?
  likelihood  Int
  severity    Int
  residualL   Int?
  residualS   Int?
  controls    String   // JSON array
  owner       String?
  reviewDate  DateTime?
  status      String   @default("OPEN") // OPEN, TREATED, CLOSED
  isoRefs     String   // JSON array
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Incident {
  id               String         @id @default(cuid())
  ref              String?        @unique
  type             String         // NEAR_MISS, UNSAFE_ACT, UNSAFE_CONDITION, INJURY, ILL_HEALTH, PROPERTY_DAMAGE, ENVIRONMENTAL
  date             DateTime
  location         String?
  description      String?
  people           String         // JSON array
  severityType     String         // FIRST_AID, MEDICAL_TREATMENT, RESTRICTED_WORK, LOST_TIME, FATALITY
  lostTimeDays     Int?
  hoursWorked      Int?
  immediateActions String?
  status           String         @default("OPEN") // OPEN, UNDER_INVESTIGATION, CLOSED
  isoRefs          String         // JSON array
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  investigation    Investigation?
  actions          Action[]       @relation("IncidentActions")
}

model Investigation {
  id              String   @id @default(cuid())
  incidentId      String   @unique
  rootCause       String?
  method          String?
  findings        String?
  recommendations String?
  incident        Incident @relation(fields: [incidentId], references: [id], onDelete: Cascade)
}

model Action {
  id                  String    @id @default(cuid())
  type                String    // CORRECTIVE, PREVENTIVE, CONTAINMENT, IMPROVEMENT
  title               String
  details             String?
  owner               String?
  dueDate             DateTime?
  completedAt         DateTime?
  effectivenessReview String?
  status              String    @default("OPEN") // OPEN, IN_PROGRESS, COMPLETED, OVERDUE
  incidentId          String?
  auditId             String?
  incident            Incident? @relation("IncidentActions", fields: [incidentId], references: [id], onDelete: Cascade)
  audit               OHSAudit? @relation("AuditActions", fields: [auditId], references: [id], onDelete: Cascade)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model OHSAudit {
  id          String   @id @default(cuid())
  type        String   // OHS_AUDIT, WORKPLACE_INSPECTION, BEHAVIORAL_SAFETY
  title       String
  date        DateTime
  location    String?
  auditor     String?
  scope       String?
  findings    String?  // JSON array
  nonConformities Int  @default(0)
  observations    Int  @default(0)
  opportunities   Int  @default(0)
  status      String   @default("PLANNED") // PLANNED, IN_PROGRESS, COMPLETED
  nextAudit   DateTime?
  isoRefs     String   // JSON array
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  actions     Action[] @relation("AuditActions")
}

model Permit {
  id              String   @id @default(cuid())
  title           String
  type            String   // HOT_WORK, CONFINED_SPACE, ELECTRICAL, HEIGHT_WORK, EXCAVATION, LIFTING
  location        String?
  validFrom       DateTime
  validUntil      DateTime
  issuedBy        String?
  approvedBy      String?  // Internal approver
  clientApprover  String?  // Client/3rd party approver
  contractor      String?
  status          String   @default("PENDING") // PENDING, APPROVED, ACTIVE, EXPIRED, CANCELLED
  hazards         String?  // JSON array of hazards
  controlMeasures String?  // JSON array of control measures
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  approvals       PermitApproval[]
}

model PermitApproval {
  id            String   @id @default(cuid())
  permitId      String
  level         Int      // 1 = Internal, 2 = Client/3rd Party
  approverRole  String
  approverName  String?
  status        String   @default("PENDING") // PENDING, APPROVED, REJECTED
  comments      String?
  signedAt      DateTime?
  permit        Permit   @relation(fields: [permitId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
}

model Contractor {
  id              String   @id @default(cuid())
  name            String
  contact         String?
  email           String?
  phone           String?
  services        String?
  preQualified    Boolean  @default(false)
  preQualDate     DateTime?
  preQualExpiry   DateTime?
  inductionStatus String   @default("PENDING") // PENDING, COMPLETED, EXPIRED
  inductionDate   DateTime?
  safetyRating    Int?     // 1-5
  lastEvaluation  DateTime?
  permitCount     Int      @default(0)
  incidentCount   Int      @default(0)
  status          String   @default("ACTIVE") // ACTIVE, SUSPENDED, TERMINATED
  isoRefs         String   // JSON array
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model OHSCompetence {
  id          String   @id @default(cuid())
  userId      String
  role        String
  requiredPPE String   // JSON array of PPE types
  training    String   // JSON array of required training
  medicalFit  Boolean  @default(true)
  medicalDate DateTime?
  medicalExpiry DateTime?
  authorized  String   // JSON array of authorizations (e.g., forklift, crane)
  restrictions String?
  isoRefs     String   // JSON array
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model HealthSurveillance {
  id            String   @id @default(cuid())
  userId        String
  exposureType  String   // NOISE, DUST, FUMES, VIBRATION, CHEMICAL, BIOLOGICAL, ERGONOMIC
  exposureLevel String?  // measurement/description
  monitoringFreq String? // daily, monthly, annual
  lastTest      DateTime?
  nextTest      DateTime?
  results       String?
  restrictions  String?
  status        String   @default("COMPLIANT") // COMPLIANT, DUE_SOON, OVERDUE, ACTION_REQUIRED
  isoRefs       String   // JSON array
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model EmergencyDrill {
  id            String   @id @default(cuid())
  type          String   // FIRE, EVACUATION, SPILL, MEDICAL, LOCKDOWN, NATURAL_DISASTER
  date          DateTime
  location      String?
  participants  Int?
  duration      Int?     // minutes
  scenarioDesc  String?
  observations  String?
  effectiveness String?  // rating or description
  improvements  String   // JSON array
  nextDrill     DateTime?
  isoRefs       String   // JSON array
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model OHSObjective {
  id          String   @id @default(cuid())
  title       String
  description String?
  category    String   // INCIDENT_REDUCTION, COMPLIANCE, TRAINING, CULTURE, ENVIRONMENTAL
  target      String
  baseline    String?
  current     String?
  dueDate     DateTime?
  owner       String?
  programs    String   // JSON array of action programs
  status      String   @default("IN_PROGRESS") // IN_PROGRESS, ACHIEVED, OVERDUE, CANCELLED
  progress    Int      @default(0) // percentage
  isoRefs     String   // JSON array
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OHSMetric {
  id            String   @id @default(cuid())
  period        String   // YYYY-MM format
  totalHours    Float
  workers       Int?
  workDays      Int?
  incidents     Int
  nearMisses    Int
  firstAid      Int
  medicalTreatment Int
  restrictedWork Int
  lostTime      Int
  fatalities    Int
  lostTimeDays  Int
  trir          Float?   // Total Recordable Incident Rate
  ltifr         Float?   // Lost Time Injury Frequency Rate
  dart          Float?   // Days Away, Restricted or Transferred
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([period])
}

// ========================================
// NON-CONFORMANCE & IMPROVEMENTS
// ========================================

model NonConformance {
  id                  String   @id @default(cuid())
  refNumber           String   @unique // NC-YYYY-####, CC-YYYY-####, SNC-YYYY-####, OFI-YYYY-####
  caseType            String   // OFI, NC, CC, SNC
  title               String
  raisedBy            String
  dateRaised          DateTime @default(now())
  process             String?
  area                String?
  department          String?
  category            String   // Product, Process, Service, Documentation, H&S, Environmental
  severity            String   @default("MEDIUM") // LOW, MEDIUM, HIGH, CRITICAL
  riskImpact          String   // JSON array: Quality, Safety, Environmental, Customer, Cost
  evidence            String?  // JSON array of file URLs/links
  linkedItems         String?  // JSON: {productNo, jobNo, customer, supplier}
  problemStatement    String   // Rich text
  
  // Conditional fields (CC - Customer Complaint)
  customerName        String?
  customerContact     String?
  complaintChannel    String?
  complaintDate       DateTime?
  externalRef         String?
  contractualImpact   Boolean  @default(false)
  responseDueDate     DateTime?
  
  // Conditional fields (SNC - Supplier)
  supplierName        String?
  supplierContact     String?
  poReference         String?
  warrantyClause      String?
  request8D           Boolean  @default(false)
  
  // Conditional fields (NC - Internal)
  detectionPoint      String?  // In-process, Final, Audit, Incoming
  scrapRework         Boolean  @default(false)
  containmentNeeded   Boolean  @default(false)
  
  // Conditional fields (OFI)
  expectedBenefit     String?  // Quality, Safety, Cost, Delivery
  effortEstimate      String?  // S, M, L
  suggestedOwner      String?
  
  // Record management
  status              String   @default("OPEN") // OPEN, UNDER_INVESTIGATION, CONTAINMENT_IN_PLACE, CORRECTIVE_ACTIONS_IN_PROGRESS, PENDING_VERIFICATION, CLOSED
  owner               String?
  approver            String?
  dueDate             DateTime?
  closedDate          DateTime?
  
  // Investigation
  investigationNotes  String?  // Rich text
  rootCauseTool       String?  // 5_WHYS, ISHIKAWA, PARETO
  rootCauseOutput     String?  // JSON or text
  escapePoint         String?
  verificationMethod  String?
  
  // Costs/Impact
  scrapHours          Float?
  reworkHours         Float?
  materialCost        Float?
  customerCredit      Float?
  downtimeHours       Float?
  
  // Standards mapping
  iso9001Clause       String?  // JSON array
  iso14001Clause      String?  // JSON array
  iso45001Clause      String?  // JSON array
  
  // Communications
  communications      String?  // JSON array of communication logs
  
  // Closure
  closureSignature    String?
  closureApprovedBy   String?
  closureApprovedAt   DateTime?
  closureComments     String?
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  actions             NCAction[]
  auditLogs           NCAuditLog[]
}

model NCAction {
  id                  String   @id @default(cuid())
  ncId                String
  actionType          String   // CONTAINMENT, CORRECTION, CORRECTIVE, PREVENTIVE, VERIFICATION
  title               String
  description         String?
  owner               String?
  dueDate             DateTime?
  priority            String   @default("MEDIUM") // LOW, MEDIUM, HIGH
  status              String   @default("OPEN") // OPEN, IN_PROGRESS, BLOCKED, DONE
  completedDate       DateTime?
  evidence            String?  // JSON array of files/links
  checklist           String?  // JSON array of checklist items
  globalActionId      String?  // Link to global Action table
  
  nonConformance      NonConformance @relation(fields: [ncId], references: [id], onDelete: Cascade)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model NCAuditLog {
  id                  String   @id @default(cuid())
  ncId                String
  eventType           String   // CREATED, EDITED, STATUS_CHANGE, ACTION_CREATED, ACTION_COMPLETED, APPROVED, CLOSED, REOPENED
  description         String
  userId              String
  userName            String?
  metadata            String?  // JSON for additional data
  
  nonConformance      NonConformance @relation(fields: [ncId], references: [id], onDelete: Cascade)
  createdAt           DateTime @default(now())
}

// ========================================
// MANAGEMENT REVIEW MODELS (ISO 9001, 14001, 45001 Clause 9.3)
// ========================================

model ManagementReview {
  id               String   @id @default(cuid())
  orgId            String
  title            String
  scheduledAt      DateTime
  startedAt        DateTime?
  endedAt          DateTime?
  location         String?
  meetingType      String   // e.g., "Quarterly", "Annual", "Extraordinary"
  standards        String   // JSON array as string: ["ISO9001","ISO14001","ISO45001"]
  agenda           String?  // JSON as string for ordered list of agenda items
  discussionNotes  String?  // Rich text minutes
  status           String   @default("DRAFT") // DRAFT, SCHEDULED, IN_PROGRESS, COMPLETED, CLOSED
  createdById      String
  updatedById      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  attendees        ManagementReviewAttendee[]
  inputs           ManagementReviewInput[]
  outputs          ManagementReviewOutput[]
  actions          ManagementReviewAction[]
  evidenceLinks    ManagementReviewEvidence[]
  auditLog         ManagementReviewAudit[]
}

model ManagementReviewAttendee {
  id          String @id @default(cuid())
  reviewId    String
  userId      String?
  name        String
  role        String? // e.g., MD, HSE Manager, Quality, Ops, HR
  required    Boolean @default(false)
  present     Boolean @default(false)
  signedOffAt DateTime?
  signature   String? // store hash or path to signature image
  
  review      ManagementReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ManagementReviewInput {
  id          String @id @default(cuid())
  reviewId    String
  standard    String // ISO9001 | ISO14001 | ISO45001
  clauseRef   String // e.g., "9.3.2 a)"
  title       String // short label
  description String // requirement description
  dataSource  String? // module ref (audits, KPIs, incidents, etc.)
  evidence    String? // JSON array as string for URLs/fileIds
  status      String  @default("PENDING") // PENDING | PROVIDED | N/A
  remarks     String?
  
  review      ManagementReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ManagementReviewOutput {
  id          String @id @default(cuid())
  reviewId    String
  standard    String
  clauseRef   String // e.g., "9.3.3 a)"
  decision    String // conclusion/decision text
  type        String // e.g., "Change Needed","Resource Need","Improvement Opportunity"
  
  review      ManagementReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ManagementReviewAction {
  id          String @id @default(cuid())
  reviewId    String
  actionId    String? // foreign key to Actions/Tasks module
  title       String
  ownerId     String?
  dueDate     DateTime?
  status      String  @default("OPEN") // OPEN | IN_PROGRESS | DONE | CLOSED
  linkage     String? // e.g., links back to input(s) that triggered it
  
  review      ManagementReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ManagementReviewEvidence {
  id          String @id @default(cuid())
  reviewId    String
  label       String
  url         String  // SharePoint/OneDrive/Local file route
  uploadedBy  String?
  uploadedAt  DateTime @default(now())
  
  review      ManagementReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model ManagementReviewAudit {
  id          String @id @default(cuid())
  reviewId    String
  actorId     String?
  event       String // CREATED | UPDATED | STATUS_CHANGE | SIGN_OFF | EXPORT
  details     String?
  at          DateTime @default(now())
  
  review      ManagementReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

// Contract Review Models
model ContractReview {
  id                String   @id @default(cuid())
  contractNumber    String
  contractTitle     String
  contractType      String   // SUPPLY, SERVICE, CONSULTING, MAINTENANCE, OTHER
  supplierName      String
  supplierContact   String?
  supplierEmail     String?
  value             Float?
  currency          String   @default("USD")
  startDate         DateTime?
  endDate           DateTime?
  renewalDate       DateTime?
  status            String   @default("DRAFT") // DRAFT, UNDER_REVIEW, APPROVED, REJECTED, EXPIRED, TERMINATED
  priority          String   @default("MEDIUM") // LOW, MEDIUM, HIGH, CRITICAL
  riskLevel         String   @default("MEDIUM") // LOW, MEDIUM, HIGH, CRITICAL
  reviewerId        String?
  reviewerName      String?
  reviewDate        DateTime?
  approvalDate      DateTime?
  approverId        String?
  approverName      String?
  comments          String?
  terms             String?  // JSON string for contract terms
  complianceNotes   String?
  nextReviewDate    DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  attachments       ContractAttachment[]
  reviews           ContractReviewLog[]
}

// Customer Satisfaction Models
model CustomerSatisfactionSurvey {
  id                String   @id @default(cuid())
  title             String
  description       String?
  surveyType        String   @default("GENERAL") // GENERAL, PRODUCT, SERVICE, SUPPORT, PROJECT
  status            String   @default("DRAFT") // DRAFT, ACTIVE, CLOSED, ARCHIVED
  targetAudience    String?  // Customer segment or criteria
  startDate         DateTime?
  endDate           DateTime?
  createdBy         String?
  createdByName     String?
  totalResponses    Int      @default(0)
  averageRating     Float?
  responseRate      Float?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  questions         CustomerSatisfactionQuestion[]
  responses         CustomerSatisfactionResponse[]
}

model CustomerSatisfactionQuestion {
  id                String   @id @default(cuid())
  surveyId          String
  questionText      String
  questionType      String   // RATING, MULTIPLE_CHOICE, TEXT, YES_NO, NPS
  options           String?  // JSON array for multiple choice options
  required          Boolean  @default(true)
  order             Int
  weight            Float    @default(1.0) // For weighted scoring
  createdAt         DateTime @default(now())
  
  // Relations
  survey            CustomerSatisfactionSurvey @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  answers           CustomerSatisfactionAnswer[]
}

model CustomerSatisfactionResponse {
  id                String   @id @default(cuid())
  surveyId          String
  customerName      String?
  customerEmail     String?
  customerCompany   String?
  customerSegment   String?  // VIP, REGULAR, NEW, etc.
  responseDate      DateTime @default(now())
  overallRating     Int?     // 1-5 or 1-10 scale
  npsScore          Int?     // Net Promoter Score
  comments          String?
  ipAddress         String?
  userAgent         String?
  completed         Boolean  @default(false)
  
  // Relations
  survey            CustomerSatisfactionSurvey @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  answers           CustomerSatisfactionAnswer[]
}

model CustomerSatisfactionAnswer {
  id                String   @id @default(cuid())
  responseId        String
  questionId        String
  answerText        String?
  answerRating      Int?     // For rating questions
  answerChoice      String?  // For multiple choice
  createdAt         DateTime @default(now())
  
  // Relations
  response          CustomerSatisfactionResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  question          CustomerSatisfactionQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model CustomerComplaint {
  id                String   @id @default(cuid())
  complaintNumber   String   @unique
  customerName      String
  customerEmail     String?
  customerPhone     String?
  customerCompany   String?
  complaintType     String   // PRODUCT, SERVICE, BILLING, DELIVERY, SUPPORT, OTHER
  priority          String   @default("MEDIUM") // LOW, MEDIUM, HIGH, CRITICAL
  status            String   @default("OPEN") // OPEN, INVESTIGATING, RESOLVED, CLOSED, ESCALATED
  subject           String
  description       String
  receivedDate      DateTime @default(now())
  dueDate           DateTime?
  assignedTo        String?
  assignedToName    String?
  resolution        String?
  resolutionDate    DateTime?
  customerSatisfied Boolean?
  followUpRequired  Boolean  @default(false)
  followUpDate      DateTime?
  tags              String?  // JSON array of tags
  attachments       String?  // JSON array of file URLs
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  actions           CustomerComplaintAction[]
  logs              CustomerComplaintLog[]
  project           Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  projectId         String?
}

model CustomerComplaintAction {
  id                String   @id @default(cuid())
  complaintId       String
  actionType        String   // CORRECTIVE, PREVENTIVE, COMMUNICATION, INVESTIGATION, CAPA
  description       String
  assignedTo        String?
  assignedToName    String?
  dueDate           DateTime?
  completedDate     DateTime?
  status            String   @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, OVERDUE
  effectiveness     String?  // EFFECTIVE, PARTIALLY_EFFECTIVE, INEFFECTIVE
  capaActionId      String?  // Link to CAPA action if applicable
  capaActionNumber  String?  // CAPA reference number
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  complaint         CustomerComplaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
}

model CustomerComplaintLog {
  id                String   @id @default(cuid())
  complaintId       String
  action            String   // CREATED, UPDATED, ASSIGNED, RESOLVED, CLOSED, ESCALATED
  performedBy       String?
  performedByName   String?
  comments          String?
  timestamp         DateTime @default(now())
  
  // Relations
  complaint         CustomerComplaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
}

// Testimonial Models
model Testimonial {
  id                String   @id @default(cuid())
  customerName      String
  customerEmail     String?
  customerCompany   String?
  customerTitle     String?
  projectName       String?
  projectType       String?  // COMPLETED, ONGOING, MAINTENANCE
  testimonialText   String
  rating            Int      // 1-5 stars
  status            String   @default("DRAFT") // DRAFT, APPROVED, PUBLISHED, REJECTED
  approvedBy        String?
  approvedByName    String?
  approvedAt        DateTime?
  publishedAt       DateTime?
  featured          Boolean  @default(false)
  tags              String?  // JSON array of tags
  attachments       String?  // JSON array of file URLs (photos, documents)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  questionnaire     TestimonialQuestionnaire?
  responses         TestimonialResponse[]
  project           Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  projectId         String?
}

model TestimonialQuestionnaire {
  id                String   @id @default(cuid())
  testimonialId     String   @unique
  questionnaireType String   @default("STANDARD") // STANDARD, CUSTOM, COMPLAINT
  status            String   @default("DRAFT") // DRAFT, SENT, COMPLETED, EXPIRED
  sentDate          DateTime?
  completedDate     DateTime?
  expiresAt         DateTime?
  reminderSent      Boolean  @default(false)
  reminderDate       DateTime?
  emailSubject      String?
  emailBody         String?
  promptingStatements String? // JSON array of prompting statements
  questions         String?  // JSON array of questions
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  testimonial       Testimonial @relation(fields: [testimonialId], references: [id], onDelete: Cascade)
  responses         TestimonialResponse[]
}

model TestimonialResponse {
  id                String   @id @default(cuid())
  testimonialId     String
  questionnaireId   String?
  customerName      String
  customerEmail     String?
  customerCompany   String?
  responseDate      DateTime @default(now())
  overallRating     Int?     // 1-5 stars
  npsScore          Int?     // Net Promoter Score
  responses         String   // JSON object of question responses
  comments          String?
  ipAddress         String?
  userAgent         String?
  completed         Boolean  @default(false)
  
  // Relations
  testimonial       Testimonial @relation(fields: [testimonialId], references: [id], onDelete: Cascade)
  questionnaire     TestimonialQuestionnaire? @relation(fields: [questionnaireId], references: [id], onDelete: SetNull)
}

// Job/Project Integration Models
model Project {
  id                String   @id @default(cuid())
  projectName       String
  projectNumber     String   @unique
  customerName      String
  customerEmail     String?
  customerCompany   String?
  projectType       String   // CONSTRUCTION, MAINTENANCE, CONSULTING, OTHER
  status            String   @default("PLANNING") // PLANNING, IN_PROGRESS, COMPLETED, ON_HOLD, CANCELLED
  startDate         DateTime?
  endDate           DateTime?
  completionDate    DateTime?
  projectManager    String?
  projectManagerName String?
  value             Float?
  currency          String   @default("USD")
  description       String?
  location          String?
  autoTestimonial   Boolean  @default(true) // Auto-send testimonial request
  testimonialSent   Boolean  @default(false)
  testimonialSentDate DateTime?
  testimonialReceived Boolean @default(false)
  testimonialReceivedDate DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  testimonials      Testimonial[]
  complaints        CustomerComplaint[]
}

model ContractAttachment {
  id              String   @id @default(cuid())
  contractId      String
  fileName        String
  fileType        String
  fileSize        Int?
  fileUrl         String?
  uploadedBy      String?
  uploadedAt      DateTime @default(now())
  description     String?
  
  contract        ContractReview @relation(fields: [contractId], references: [id], onDelete: Cascade)
}

model ContractReviewLog {
  id          String   @id @default(cuid())
  contractId  String
  action      String   // CREATED, UPDATED, REVIEWED, APPROVED, REJECTED, EXPIRED, TERMINATED
  performedBy String?
  comments    String?
  timestamp   DateTime @default(now())
  
  contract    ContractReview @relation(fields: [contractId], references: [id], onDelete: Cascade)
}

// ========================================
// ENVIRONMENTAL MANAGEMENT SYSTEM (EMS)
// ========================================

// Waste Management Models
model WasteType {
  id                String   @id @default(cuid())
  name              String   @unique
  description       String?
  category          String   // HAZARDOUS, NON_HAZARDOUS, RECYCLABLE, ORGANIC, ELECTRONIC
  hazardClass       String?  // For hazardous waste
  disposalMethod    String?  // LANDFILL, INCINERATION, RECYCLING, COMPOSTING, TREATMENT
  regulatoryCode    String?  // EPA, DOT, or other regulatory codes
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  wasteRecords      WasteRecord[]
}

model WasteRecord {
  id                String   @id @default(cuid())
  recordNumber      String   @unique // WM-YYYY-####
  wasteTypeId       String
  quantity          Float
  unit              String   // KG, LITERS, CUBIC_METERS, PIECES
  location          String
  generatedBy       String   // Department or person
  generatedDate     DateTime
  storedDate        DateTime?
  disposalDate      DateTime?
  disposalMethod    String   // LANDFILL, INCINERATION, RECYCLING, COMPOSTING, TREATMENT
  disposalFacility  String?  // Name of disposal facility
  transporter       String?  // Name of waste transporter
  manifestNumber    String?  // Waste manifest number
  cost              Float?   // Disposal cost
  status            String   @default("GENERATED") // GENERATED, STORED, IN_TRANSIT, DISPOSED
  notes             String?
  attachments       String?  // JSON array of file URLs
  createdBy         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  wasteType         WasteType @relation(fields: [wasteTypeId], references: [id], onDelete: Restrict)
  logs              WasteRecordLog[]
}

model WasteRecordLog {
  id                String   @id @default(cuid())
  wasteRecordId     String
  action            String   // GENERATED, STORED, PICKED_UP, DISPOSED, UPDATED
  performedBy       String?
  comments          String?
  timestamp         DateTime @default(now())
  
  wasteRecord       WasteRecord @relation(fields: [wasteRecordId], references: [id], onDelete: Cascade)
}

model WasteDisposalFacility {
  id                String   @id @default(cuid())
  name              String
  facilityType      String   // LANDFILL, INCINERATION, RECYCLING, TREATMENT, COMPOSTING
  address           String?
  contactPerson     String?
  contactPhone      String?
  contactEmail      String?
  licenseNumber     String?
  licenseExpiry     DateTime?
  acceptedWasteTypes String? // JSON array of accepted waste types
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model WasteTransporter {
  id                String   @id @default(cuid())
  name              String
  licenseNumber     String?
  contactPerson     String?
  contactPhone      String?
  contactEmail      String?
  address           String?
  licenseExpiry     DateTime?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// ========================================
// AUDITS & INSPECTIONS
// ========================================

model AuditType {
  id                String   @id @default(cuid())
  name              String   @unique
  description       String?
  category          String   // INTERNAL, EXTERNAL, SUPPLIER, CUSTOMER, REGULATORY
  frequency         String   // ANNUAL, BI_ANNUAL, QUARTERLY, MONTHLY, AD_HOC
  standard          String?  // ISO 9001, ISO 14001, ISO 45001, CUSTOM
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  audits            Audit[]
}

model Audit {
  id                String   @id @default(cuid())
  auditNumber       String   @unique // AUD-YYYY-####
  auditTypeId       String
  title             String
  description       String?
  scope             String
  objectives        String?
  auditStandard     String   // ISO 9001, ISO 14001, ISO 45001, CUSTOM
  auditCriteria     String?  // Specific clauses or requirements
  plannedStartDate  DateTime
  plannedEndDate    DateTime
  actualStartDate   DateTime?
  actualEndDate     DateTime?
  status            String   @default("PLANNED") // PLANNED, IN_PROGRESS, COMPLETED, CANCELLED, DEFERRED
  ragStatus         String   @default("GREEN") // GREEN, AMBER, RED
  leadAuditor       String?
  leadAuditorName   String?
  auditTeam         String?  // JSON array of auditor names
  auditee           String?  // Department or process owner
  auditeeName       String?
  location          String?
  auditMethod       String?  // ON_SITE, REMOTE, HYBRID
  findings          Int      @default(0) // Number of findings
  nonConformities   Int      @default(0) // Number of NCs
  observations      Int      @default(0) // Number of observations
  opportunities     Int      @default(0) // Number of OFIs
  effectiveness     Int?     // 1-5 rating
  notes             String?
  attachments       String?  // JSON array of file URLs
  createdBy         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  auditType         AuditType @relation(fields: [auditTypeId], references: [id], onDelete: Restrict)
  auditFindings     AuditFinding[]
  logs              AuditLog[]
}

model AuditFinding {
  id                String   @id @default(cuid())
  auditId           String
  findingNumber     String   // AUD-YYYY-####-F001
  type              String   // NON_CONFORMITY, OBSERVATION, OPPORTUNITY_FOR_IMPROVEMENT
  severity          String   // MAJOR, MINOR, OBSERVATION, OFI
  clause            String?  // ISO clause reference
  description       String
  evidence          String?  // Evidence of the finding
  rootCause         String?  // Root cause analysis
  correctiveAction  String?  // Proposed corrective action
  responsible       String?  // Person responsible for action
  dueDate           DateTime?
  status            String   @default("OPEN") // OPEN, IN_PROGRESS, CLOSED, VERIFIED
  verificationDate  DateTime?
  verifiedBy        String?
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  audit             Audit @relation(fields: [auditId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id                String   @id @default(cuid())
  auditId           String
  action            String   // CREATED, UPDATED, STARTED, COMPLETED, CANCELLED, DEFERRED
  performedBy       String?
  comments          String?
  timestamp         DateTime @default(now())
  
  audit             Audit @relation(fields: [auditId], references: [id], onDelete: Cascade)
}

model InspectionType {
  id                String   @id @default(cuid())
  name              String   @unique
  description       String?
  category          String   // SAFETY, ENVIRONMENTAL, QUALITY, EQUIPMENT, FACILITY
  frequency         String   // DAILY, WEEKLY, MONTHLY, QUARTERLY, ANNUAL, AD_HOC
  checklist         String?  // JSON array of checklist items
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  inspections       Inspection[]
}

model Inspection {
  id                String   @id @default(cuid())
  inspectionNumber  String   @unique // INS-YYYY-####
  inspectionTypeId  String
  title             String
  description       String?
  location          String
  inspector         String
  inspectorName     String?
  plannedDate       DateTime
  actualDate        DateTime?
  status            String   @default("PLANNED") // PLANNED, IN_PROGRESS, COMPLETED, CANCELLED
  ragStatus         String   @default("GREEN") // GREEN, AMBER, RED
  findings          Int      @default(0)
  criticalIssues    Int      @default(0)
  minorIssues       Int      @default(0)
  observations      Int      @default(0)
  score             Int?     // Overall inspection score
  maxScore          Int?     // Maximum possible score
  notes             String?
  attachments       String?  // JSON array of file URLs
  createdBy         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  inspectionType    InspectionType @relation(fields: [inspectionTypeId], references: [id], onDelete: Restrict)
  inspectionFindings InspectionFinding[]
  logs              InspectionLog[]
}

model InspectionFinding {
  id                String   @id @default(cuid())
  inspectionId      String
  findingNumber     String   // INS-YYYY-####-F001
  type              String   // CRITICAL, MAJOR, MINOR, OBSERVATION
  description       String
  location          String?
  correctiveAction  String?
  responsible       String?
  dueDate           DateTime?
  status            String   @default("OPEN") // OPEN, IN_PROGRESS, CLOSED, VERIFIED
  verificationDate  DateTime?
  verifiedBy        String?
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  inspection        Inspection @relation(fields: [inspectionId], references: [id], onDelete: Cascade)
}

model InspectionLog {
  id                String   @id @default(cuid())
  inspectionId      String
  action            String   // CREATED, UPDATED, STARTED, COMPLETED, CANCELLED
  performedBy       String?
  comments          String?
  timestamp         DateTime @default(now())
  
  inspection        Inspection @relation(fields: [inspectionId], references: [id], onDelete: Cascade)
}

